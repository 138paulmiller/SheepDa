#!/usr/bin/env python

'''
SheepDa - A "Soft" Functional Scripting Language

Copyright 2017 Paul Miller (github.com/138paulmiller)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
import sys, os
VERSION = 0.1
DEBUG = True
HELP = open(os.path.dirname(os.path.abspath(__file__))+"/HELP").read()
SYNTAX = open(os.path.dirname(os.path.abspath(__file__))+"/SYNTAX").read()
'''
AST Node Tags
'''
APPLY 	= 'APPLY' 	# Lambda Application
CLOSURE = 'CLOSURE'  # Lambda Abstaction
ASSIGN 	= 'ASSIGN'  # Variable assignement
BUILTIN = 'BUILTIN' # Builtin Variables
LIST 	= 'LIST'

'''
Token Symbol Tags
'''
LPAREN 	= 'LPAREN'
RPAREN 	= 'RPAREN'
LBRACK 	= 'LBRACK'
RBRACK 	= 'RBRACK'
LAMBDA 	= 'LAMBDA'
DOT 	= 'DOT'
STRING	= 'STRING'
EQUAL	= 'EQUAL'
ID 		= 'ID'
FLOAT 	= 'FLOAT'
INT 	= 'INT'
COMMENT = 'COMMENT'
EOI 	= 'EOI'
ERROR 	= 'ERROR'
KEYWORD	= 'KEYWORD' 

keywords = ['*','/','+', '-','<', '>', 'eq', 'and','or','not', \
			'print', 'read', 'true', 'false', 'range', 'filter', 'map', 'fold']
controls = ['if', 'import']

#------------------------Repl--------------------------#
def main(args):
	try:
	   input = raw_input
	except NameError:
		pass
	bindings = {} 
	if len(args) > 0: 
		if args[0] == '-h':
			print(HELP)
		if args[0] == '-s':
			print(SYNTAX)
		else:
			interpret(file(args[0]).read(), bindings)
	else: # repl
		source = input('\nSheepDa Version '+str(VERSION)+'\nIf you are new, type help\n\n@>')		
		while source != 'quit':
			if source == 'help':
				print(HELP)
			elif source == 'unbind':
				# delete all user defined bindings
				bindings.clear() 
			else:
				interpret(source, bindings)
			source = input('@>')			
		print('Goodbye') 


def interpret(source, bindings):
	lexer = Lexer(source)
	# generate ast [expr ... ]
	ast = parse(lexer)
	exprs = []
	# evaluate each expr in ast
	for node in ast:
		expr = evaluate(node, bindings)			
		#print(expr	
		exprs.append(expr)
	for expr in exprs:
		if isinstance(expr, tuple) and expr[0] == ERROR:					
			print(ERROR + ' ' + expr[1])

#------------------------Lexer --------------------------#	
class Lexer:
	'''
	 Returns tokens (tag, value)
	'''
	def __init__(self, input):
		self.input = input
		self.pos = 0 
		self.len = len(self.input)

	def peek(self):
		token = None
		# eat whitespace
		while self.pos < self.len and  \
		  (self.input[self.pos] == ' '  or \
		  self.input[self.pos] == '\t' or \
		  self.input[self.pos] == '\n'):
			self.pos+=1
		if self.pos >= self.len:
			token = (EOI, 'End of Input')
		else:
			sym = self.input[self.pos]
			if  sym == '(':
				token = (LPAREN,sym )
			elif sym == ')':
				token = (RPAREN, sym)
			elif sym == '\\':
				token = (LAMBDA, sym)
			elif sym == '.': 
				token = (DOT, sym)
			elif sym == '=': 
				token = (EQUAL, sym)
			elif  sym == '[':
				token = (LBRACK,sym )
			elif  sym == ']':
				token = (RBRACK,sym )
			elif sym  in keywords and not sym is '-':
				token = (KEYWORD, sym)
			elif sym == '\"': 
				string = ""
				i = self.pos+1
				while i < self.len and self.input[i] != '\"':
					string += self.input[i]
					i += 1
				if i < self.len:
					i+=1
					token = (STRING, string)
				else:
					token = (ERROR, 'Missing closing quote')
			elif sym == ';':
				comment = ''
				while self.pos < self.len and self.input[self.pos] != '\n':
					comment += self.input[self.pos]
					self.pos += 1
				token = (COMMENT, comment) 
			elif sym.isalpha(): # id
				def_id = sym
				i = self.pos+1
				while i <  self.len and self.input[i].isalnum(): 
					def_id += self.input[i]
					i+=1
				if def_id in keywords or def_id in controls:
					token = (KEYWORD, def_id)				
				else:
					token = (ID, def_id)
				
			elif sym.isdigit() or sym == '-':
				# negative number
				if sym.isdigit() or (sym == '-' and self.pos+1 < self.len and self.input[self.pos+1].isdigit()):
					num = sym
					i = self.pos+1
					while i <  self.len and self.input[i].isalnum(): 
						num += self.input[i]
						i+=1
					if i < len(self.input) and self.input[i] == '.':
						num += self.input[i]
						i+=1					
						while i < self.len and \
							self.input[i].isalnum(): 
							num += self.input[i]
							i+=1
						token = (FLOAT, num)
					else:
						token = (INT, num)
				else: # subtraction operator 	
					token = (KEYWORD, sym)
			else:
				token = (ERROR, 'Unknown Token: ' + self.input[self.pos])
		return token									

	def next(self):
		token = self.peek()
		if token:
			if token[0] != ERROR:
				# offset input by token lexeme len
				self.pos += len(token[1])
				if token[0] == STRING: #offset for both quotes read but not captured
					self.pos += 2
		else:
			token = (ERROR, ' Unexpected NULL Token') 
		return token
#------------------------Parser --------------------------#
def parse(lexer):
	'''
	Returns AST Nodes 
		(ASSIGN, (def_id_id, expr))
		(CLOSURE, ([<def_id_id> ...], expr))
		(APPLY ([ID KEYWORD] [<expr> ...]))
	'''
	ast = []
	tag, value = lexer.peek()
	while tag != ERROR and tag != EOI:
		if tag == ID:
			# get def id 
			def_id = lexer.next()
			# check next token for equal sign
			tag, value = lexer.next()
			if tag == EQUAL:
				# return def_id value (id) and expression
				ast.append((ASSIGN, (def_id[1], parse_expr(lexer))))
			else: # standalone def_id
				ast.append(def_id)
		elif tag != COMMENT: # ignore comments
			ast.append(parse_expr(lexer))
		tag, value = lexer.peek()
	return ast

def parse_expr(lexer):
	'''
	Parses individual expressions
		(INT  int)
		(ID  str)
		(FLOAT  float)
		(KETYWORD  str)
		(STRING str)
		(LIST  [<expr> ...])
		(LAMBDA  [params .. ] <expr>)
	'''
	tag, value = lexer.next()
	root = None
	if tag in [KEYWORD, ID, FLOAT, INT, STRING]: # if ID or Float or ...
		 # eat token
		root = (tag, value)
		# return 
	elif tag == LAMBDA: # if abstraction
		bindings = [] #  bound parameter ids
		# get next, must be either def_id or dot
		tag, value = lexer.next()
		# get all following def_id values (ids)
		while tag == ID:
			bindings.append(value)
			tag, value = lexer.next()
		if tag == DOT:
			root = (CLOSURE, (bindings, parse_expr(lexer)))
		else:
			root = (ERROR, 'Expected ' + DOT + ' at: ' + value)
	elif tag == LPAREN: # if application
		# apply first expression to all expressions until rparen
		expr = None 
		def_id = parse_expr(lexer)
		if def_id[0] != ID and def_id[0] != KEYWORD:
		 	expr = def_id
		else:
		 	expr = def_id[1]
		args = []
		# eat lparen
		tag, value = lexer.peek()
		while tag != RPAREN and tag != ERROR and tag != EOI:	
			args.append(parse_expr(lexer))
			tag, value = lexer.peek()
		if tag == ERROR or tag == EOI:
			root = (ERROR, 'Missing Closing Parentheses!')		
		else:
			#eat rparen
			lexer.next()
			root = (APPLY, (expr, args))
	elif tag == LBRACK: 
		exprs = []
		tag, value = lexer.peek()
		while tag != RBRACK and tag != EOI and tag != ERROR:
			exprs.append(parse_expr(lexer))				
			tag, value = lexer.peek()			
		if tag == RBRACK:
			lexer.next() # eat rbrack			
			root = (LIST, exprs)
		elif tag == EOI:
			root = (ERROR, 'Missing closing list bracket')
		else:
			root = (tag, value)
	elif tag == COMMENT or tag == ERROR:
		root = tag, value
	else:
		root = (ERROR, 'Unexpected :'+ value)
	return root

#------------------------Closure --------------------------#
class Closure:
	'''
		Closure Container
	'''
	def __init__(self, bindings,  expr, params, param_count=0):
		# locally bound def_idiables
		self.bindings = {}
		for def_id in bindings.keys():
			self.bindings[def_id] = bindings[def_id]

		# parameters to be substituted at call binding scope
		self.expr = expr
		self.params = []
		if params:
			param_count = 0
			for def_id in params:
				self.params.append(def_id)
				param_count+=1		
			# expression to evaluate at the scope of bindings
		self.param_count = param_count


	def __repr__(self):
		s = '('
		for p in self.params:
			s+= p + ' '
		s += ')'
			
		# s += ')\n\tBINDINGS: '
		# for def_id, value in self.bindings.items():
		# 	s += '\n\t\t' + def_id + ': ' + str(value) 
		return  s
	
#------------------------Evaluate Builtins--------------------------#
def eval_add(bindings):
	left = bindings['0']
	right = bindings['1']
	try:			
		if isinstance(left, str):
			right = str(right)
		elif isinstance(right, str):
			left = str(left)
		expr = left + right
	except:
		expr = (ERROR, 'Invalid Operands: Expected (+ <Int|Float|String> <Int|Float|String>)')						 			
	return expr

def eval_sub(bindings):
	left = bindings['0']
	right = bindings['1']
	try:	
		# if either operands are strings, get the intersection of the two
		if isinstance(left, str) or isinstance(right, str):
			if right == None:
				expr = left
			else:
				expr = str(left).replace( str(right), '')	
		else:
			expr = left - right 		
	except:
		expr = (ERROR, 'Invalid Operands:Expected (- <Int|Float|String> <Int|Float|String>)')						 			
	return expr

def eval_mul(bindings):
	left = bindings['0']
	right = bindings['1']
	expr = None

	if  isinstance(left,str):
		if isinstance(right, str):
			expr = ''
			for i in range(0, len(left)):
				expr += left[i]
				if 	i < len(right):
					expr += right[i]
		else:
			expr = ''
			i = 0
			# too large for range
			while i < int(right):
				expr += left
				i+=1		
	else:
		try:			
			expr = left * right	
		except:			
			expr = (ERROR, 'Invalid Operands: Expected  (* <Int|Float|String> <Int|Float|String>)')
	return expr						

def eval_div(bindings):
	left = bindings['0']
	right = bindings['1']
	try:
		if isinstance(left, str):	
		# get the intersection!
			if right == None:
				expr = left
			else:
				right = str(right)
				expr = ''
				for sym in left:
					if not sym in right:
						expr += sym
		else:
			expr = left / right	
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (/ <Int|Float|String> <Int|Float|String>)')
	return expr							

def eval_not(bindings):
	if not bindings['0']:
		return  'true'
	else:
		return  'false'	

def eval_lt(bindings):
	if bindings['0'] < bindings['1']:
		return  'true'
	else:
		return  'false'

def eval_gt(bindings):
	if bindings['0'] > bindings['1']:
		return  'true'
	else:
		return  'false'

def eval_eq(bindings):
	if bindings['0'] is bindings['1']:
		return  'true'
	else:
		return  'false'
	
def eval_and(bindings):
	if bindings['0'] and bindings['1']:
		return  'true'
	else:
		return  'false'

def eval_or(bindings):
	left = bindings['0']
	# lazy eval
	if left:			
		expr = left or bindings['1']
	else:
		expr = left
	if expr:
		expr = 'true'
	else:
		expr = 'false'
	return expr


def eval_print(bindings):
	expr = bindings['0']
	if isinstance(expr, tuple) and expr[0] is ERROR:
		return expr 
	elif isinstance(expr, list):
		s = '['
		for e in expr:	
			s += str(e) + ' '
		expr = s+']'
	print(expr)
	return expr


def eval_if(bindings):
	cond = evaluate(bindings['0'], bindings)	
	if cond != 'false' and (cond is 'true' or cond != 0) :
		# if error
		if isinstance(cond, tuple) and cond[0] is ERROR:
			expr = cond	
		else:
			# evaluate true expr
			expr = evaluate(bindings['1'], bindings)	
	else:
		# evaluate false expr
		expr = evaluate(bindings['2'], bindings)	
	return expr

def eval_import(bindings):
	expr = 'true'
	try:
		src = evaluate(bindings['0'], bindings)
		# interpret the file
		interpret(file(src).read(), bindings)
	except:
		expr = (ERROR, 'Import file not found:'+ str(bindings['0']))
	#open and read file
	return expr

def eval_range(bindings):
	# return a list between given ranges
	start = bindings['0']
	end  = bindings['1']
	expr = []		
	d = 1
	try:
		if not isinstance(start, int):
			start = evaluate(bindings['0'], bindings) 	
		if not isinstance(end, int):
			end = evaluate(bindings['0'], bindings)
		if start > end:
			d = -1
		while start != end:	
			expr.append(start)	
			start += d
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (range <Int> <Int>)')

	return expr


def eval_reverse(bindings):
	#reverse a list
	arg = None
	expr = None
	if bindings.has_key('0'):
		arg =  bindings['0']
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (reverse <list> ...)') 
	else:
		 expr = bindings['0'][::-1] #reverses list in pythonic way with slicing 
	return expr

def eval_head(bindings):
	# return first element in list
	arg = None
	expr = None
	if bindings.has_key('0'):
		arg =  bindings['0']
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (reverse <list> ...)') 
	else:
		# evaluate the elements value
		expr = evaluate(bindings['0'][0],bindings) #reverses list in pythonic way with slicing 
	return expr

def eval_tail(bindings):
	# return all but first elements in list
	arg = None
	expr = None
	if bindings.has_key('0'):
		arg =  bindings['0']
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (reverse <list> ...)') 
	else:
		 expr = bindings['0'][1:] #reverses list in pythonic way with slicing 
	return expr

def eval_map(bindings):
	# (map <closure> <list> ... )
	# expect a list and a closure
	# each elem is passed to closure that should except one param for each list
	# added result to list thats returned
	expr = None
	closure = None
	args = []
	list_size = 0
	local_bindings = {}
	if bindings.has_key('0'):
		closure = bindings['0']
	if not closure or not isinstance(closure, Closure):
		expr = (ERROR, 'Invalid Operands: Expected (map <abstraction> <list> ...)') 
	else:
		for local in bindings.keys():
			local_bindings[local] = bindings[local]
	# get all args
	i = 1 #list args		
	while bindings.has_key(str(i)) and not expr: 
		args.append(bindings[str(i)])
		if list_size is 0:
			list_size = len(args[-1])
		elif not list_size is len(args[-1]):	
		  	expr = (ERROR, 'All list arguments must be of equal length: Expected (map <abstraction> <list> ...)') 
		elif not isinstance(args[-1], list):
			expr = (ERROR, 'Invalid Operands: Expected (map <abstraction> <list> ...)') 
		i += 1
	# see if len(args) matches len of closure, if variable args, just pass
	if not expr:
		if closure.param_count != -1 and len(args) != closure.param_count:
		 	expr = (ERROR, 'Incorrect number of lists passed to application in (map <abstraction> <list> ...)') 		
		else:
			i = 0 # cur eval element
			expr = []	
			# var args 
			while i < list_size:				
				for j in range(0, len(closure.params)):
					local_bindings[closure.params[j]] = args[j][i]
				result = evaluate(closure.expr, local_bindings)
				if isinstance(result, tuple ) and result[0] is ERROR:
					expr = result
					i = list_size # end loop
				else:
					expr.append( result)
				i += 1
	return expr

def eval_filter(bindings):
	# (filter <cond_closure>  <list>)
	# expect a list and a closure
	# each elem is passed to closure that should except one param 
	# and return cond if true add elem to list thats returned
	expr = []
	return expr


def eval_fold(bindings):
	# (fold <abstraction> <initial> <list>) 
	# folds right! to fold left, reverse list! 
	# (fold + x [1 2 3 4]) = (+ 1 (+ 2( + 3 (+ 4 x))))
	expr = None
	intial = None
	list_arg = None
	closure = None
	local_bindings = {}
	if bindings.has_key('0'):
		closure = bindings['0']
	if bindings.has_key('1'):
		intial = bindings['1']
	if bindings.has_key('2'):
		list_arg = bindings['2']
	if not closure or not isinstance(closure, Closure) \
		or not list_arg or not isinstance(list_arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (fold <abstraction> <initial> <list>)') 
	elif closure.param_count != 2:
		expr = (ERROR, 'Invalid abstraction Parameters: Expected 2 parameters in (reduce <abstraction> <initial> <list>)') 
	else:	
		# get locals
		for local in bindings.keys():
			local_bindings[local] = bindings[local]

		raw_input(closure)
		# eval last two first!
		i = len(list_arg)-1 
		# eval at call scope, [x y] should not refer to \x y . in abstactions
		result =  evaluate(intial, bindings)
		while i >= 0:
			local_bindings[closure.params[0]] = evaluate(list_arg[i],bindings)
			local_bindings[closure.params[1]] = result
			result = evaluate(closure.expr, local_bindings)
			i-=1			
		expr = result	
	return expr

'''
	Builtin Evaluate Action Table	
	symbol : (function(bindings), paramcount)
'''
builtins = {
	# control
	'if'	:(eval_if, 3),
	'import':(eval_import,1),
	# operators
	'+'	:(eval_add, 2),
	'-'	:(eval_sub,2),
	'*'	:(eval_mul, 2),
	'/'	:(eval_div, 2),
	'<'	:(eval_lt, 2),
	'>'	:(eval_gt,2),
	'eq'	:(eval_eq,2),
	'and'	:(eval_and,2),
	'or'	:(eval_or,2),
	'not'	:(eval_not,1),
	# utilities
	'print'	:(eval_print,1 ),
	'range':(eval_range,2),
	# list utils
	'head' :(eval_head, 1),
	'tail' :(eval_tail, 1),
	'reverse':(eval_reverse, 1),
	'filter':(eval_filter,2),
	'fold':(eval_fold,3),
	'map':(eval_map,-1) 
}
def eval_builtin(root, bindings):
	expr = None
	#if def_id then requesting closure definition
	if root[0] == KEYWORD:
		tag, value = root
		closure_tag = (BUILTIN, value)
		if value == 'true':
			expr = True
		elif value ==  'false':
			expr = False	
		elif value in builtins:
			arg_count = builtins[value][1]
			if arg_count != -1: 
				params = [str(x) for x in range(0,arg_count)]
				expr = bindings[value] = Closure(bindings,  closure_tag, params)
			else:
				expr = bindings[value] = Closure(bindings,  closure_tag, None, arg_count)
	# else ( def_id, args) call to built_in closure
	elif root[0] == ERROR:
		expr = root
	else: 
		expr= builtins[root][0](bindings)	
	return expr

#------------------------Evaluate --------------------------#
def evaluate(root, bindings):
	expr = root # evaluated expression
	tag, value = (None, None)
	try:
		tag, value = root
	except:
		pass
	if tag == ASSIGN:
		# add expr to binding with def_id key
		if bindings.get(value[0]):
			print(value[0], "Already exists!")
			expr = None	
		else:
			expr = evaluate(value[1], bindings)
			if not isinstance(expr, tuple) or not expr[0] == ERROR:
				bindings[value[0]] = expr # is not error, bind
	elif tag == CLOSURE:
		# return a closure object with parent bindings
		expr =  Closure(bindings, value[1], value[0])
	elif tag == APPLY:
		# Evaluate by  binding all closure params with each args
		def_id = value[0] # get closure id
		args = value[1]
		closure = None
		# if an application, get the closure definition
		if def_id[0] is CLOSURE :	
			closure =  evaluate(def_id, bindings) # if the def_id is not an id but a closure		
		elif def_id[0] is APPLY:
			closure = evaluate(def_id, bindings)
		# if not an application, and not user defined, request builtin closure def
		elif def_id not in bindings:
			# get builtin closure 
			closure = evaluate((KEYWORD, def_id), bindings)
		# get the closure to be called
		else:
			closure = bindings[def_id]
		# if closure was found 
		if isinstance(closure, Closure):
			arg_count= len(args)
			param_count = closure.param_count
			params = closure.params
			if param_count != -1 and param_count != arg_count:
				expr = (ERROR, 'Incorrect number of arguments passed to application: '+ str(def_id))
			elif def_id in controls:
				# if a control structure, add arguments to bindings				
				for i in range(0, arg_count):
					# do not evaluate args in control structure
					bindings[params[i]] = args[i] 	
				expr = eval_builtin(def_id,  bindings)
			else:
				# if a application closure
				local_bindings	= {}
				# bind all arguments to closures local bindings
				for bind in bindings:
					local_bindings[bind] = bindings[bind]
				# update closure bindings last, will add closure precedence over calling
				for bind in closure.bindings.keys():
					local_bindings[bind] = closure.bindings[bind]	
				if param_count != -1: # if not var args
					# evaluate each argument and bind it to the local level 
					for i in range(0, arg_count):
						local_bindings[params[i]] = evaluate(args[i], bindings) 	
				else:
					param = 0
					for i in range(0, arg_count):
						local_bindings[str(param)] = evaluate(args[i], bindings) 
						param += 1			
				expr = evaluate(closure.expr, local_bindings)
		# empty closure, could not find
		else:
			if closure:
				if isinstance(closure, tuple) and closure[0] == ERROR:
					expr = closure
				else:
					expr = (ERROR, str(closure) + ' is not bound within this application: ')
			else:
				expr = (ERROR, 'Application is not defined: ' + str(def_id))
	elif tag == ID:
		if value in bindings:
			expr = bindings[value] 			
		else:
			expr = (ERROR, str(tag) + str(value) + " not defined in this scope")
	elif tag == LIST:
		# eval all exprs into list object
		expr = []
		for arg in value:
			expr.append(evaluate(arg, bindings))
	elif tag == FLOAT:
		expr = float(value)
	elif tag == INT:
		expr = int(value)
	elif tag == STRING:
		expr = str(value)
	elif tag == KEYWORD: #if keyword, get builtin definition
		expr = eval_builtin(root, bindings)
	elif tag == BUILTIN: # if builtin, evaluate
		expr = eval_builtin(value, bindings)
	elif tag == ERROR:
		print(tag + str(value))
		expr = None
	#else error		
	return expr
 

# Run main after all defintions 
if __name__ == '__main__':
	main(sys.argv[1:])
