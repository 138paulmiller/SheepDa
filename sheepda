#!/usr/bin/env python

'''
SheepDa - A "Soft" Functional Scripting Language

Copyright 2017 Paul Miller (github.com/138paulmiller)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
import sys, os
VERSION = 0.1
DEBUG = True
HELP = file(os.path.dirname(os.path.abspath(__file__))+"/HELP").read()
SYNTAX = file(os.path.dirname(os.path.abspath(__file__))+"/SYNTAX").read()
global_bindings = {}
'''
AST Node Tags
'''
APPLY 	= 'APPLY' 	# Lambda Application
CLOSURE = 'CLOSURE'  # Lambda Abstaction
ASSIGN 	= 'ASSIGN'  # Variable assignement
BUILTIN = 'BUILTIN' # Builtin Variables
LIST 	= 'LIST'

'''
Token Symbol Tags
'''
LPAREN 	= 'LPAREN'
RPAREN 	= 'RPAREN'
LBRACK 	= 'LBRACK'
RBRACK 	= 'RBRACK'
LAMBDA 	= 'LAMBDA'
DOT 	= 'DOT'
STRING	= 'STRING'
EQUAL	= 'EQUAL'
ID 		= 'ID'
FLOAT 	= 'FLOAT'
INT 	= 'INT'
COMMENT = 'COMMENT'
EOI 	= 'EOI'
ERROR 	= 'ERROR'
KEYWORD	= 'KEYWORD' 
TYPE 	= 'TYPE'
# #arithmetic, #bool, #type conversion, IO,  and list apps
keywords = ['*','/', '%','+', '-','root', 'exp',  
			'<', '>', 'eq', 'and','or','not', 'true', 'false', 
			'type', 'int', 'float', 'string', 'bool', 
			'print', 'read', 
			'range', 'filter', 'map', 'fold','reverse', 'head', 'tail'
			]

# lazily evaluate control flow application
controls = ['if', 'import', 'exit', 'while', 'set', 'list']

#------------------------Repl--------------------------#
def main(args):
	try:
	   input = raw_input
	except NameError:
		pass
	global global_bindings	
	global_bindings = {} 
	if len(args) > 0: 
		if args[0] == '-h':
			print(HELP)
		elif args[0] == '-s':
			print(SYNTAX)
		else:
			interpret(args[0], global_bindings, True) # interp file
	else: # repl
		print('\nSheepDa Version '+str(VERSION)+'\nIf you are new, type help')		
		history = [] # stack of previous entered commands unlimited??
		source = ''
		cur = 0
		quit = False
		while not quit :
			source = input('@>')	
			history.append(source)
			cur += 1
			if source == 'help':
				print(HELP)
			elif source == 'unbind':
				# delete all user defined bindings
				global_bindings.clear() 
			elif source == 'quit':
				quit = True
			else:
				interpret(source, global_bindings, is_repl=True)						
		print('Goodbye') 


def interpret(source, bindings, is_file=False, is_repl =False):
	if is_file:
		try:			
			source = os.path.abspath(source)
			# open file with its absolute path
			source = file(source).read()
		except:
			expr = (ERROR, 'Import file not found:'+ str(source))
			print expr[0], ' ', expr[1] 
			return expr
			
	lexer = Lexer(source)
	# generate ast [expr ... ]
	ast = parse(lexer)
	#exprs = []		
	# evaluate each expr in ast

	for node in ast:		
		expr = evaluate(node, bindings)	
		#exprs.append(expr)	
		if isinstance(expr, tuple):						
			if expr[0] == ERROR:
				print(ERROR + ' ' + expr[1])
				break
		# print only expr(non-tokens  or nontuples)
		elif is_repl:
			
			print (to_string(expr,bindings))


#------------------------Lexer --------------------------#	
class Lexer:
	'''
	 Returns tokens (tag, value)
	'''
	def __init__(self, input):
		self.input = input
		self.pos = 0 
		self.len = len(self.input)
		self.cur_token = None

	def peek(self):
		# if already found token
		if self.cur_token:
			return self.cur_token
		token = None
		# eat whitespace
		skip = True
		
		while self.pos < self.len and  \
		  (self.input[self.pos] == ' '  or \
		  self.input[self.pos] == '\t' or \
		  self.input[self.pos] == '\n'):
			self.pos+=1	

		if self.pos >= self.len:
			token = (EOI, 'End of Input')
		else:
			sym = self.input[self.pos]
			if sym == ';':
				# eat comment
				while self.pos < self.len and self.input[self.pos] != '\n':
					self.pos += 1
				self.pos += 1 # eat newline
				token = self.peek() # return new token	
			elif  sym == '(':
				token = (LPAREN,sym )
			elif sym == ')':
				token = (RPAREN, sym)
			elif sym == '\\':
				token = (LAMBDA, sym)
			elif sym == '.': 
				token = (DOT, sym)
			elif sym == '=': 
				token = (EQUAL, sym)
			elif  sym == '[':
				token = (LBRACK,sym )
			elif  sym == ']':
				token = (RBRACK,sym )
			elif sym  in keywords and not sym == '-':
				token = (KEYWORD, sym)
			elif sym == '\"': 
				string = ""
				i = self.pos+1
				while i < self.len and self.input[i] != '\"':
					string += self.input[i]
					i += 1
				if i < self.len:
					i+=1
					token = (STRING, string)
				else:
					token = (ERROR, 'Missing closing quote')
			elif sym.isalpha(): # id
				def_id = sym
				i = self.pos+1
				while i <  self.len and (self.input[i].isalnum() or self.input[i] == '_'): 
					def_id += self.input[i]
					i+=1
				if def_id in keywords or def_id in controls:
					token = (KEYWORD, def_id)			
				else:
					token = (ID, def_id)
				
			elif sym.isdigit() or sym == '-':
				# negative number
				if sym.isdigit() or (sym == '-' and self.pos+1 < self.len and self.input[self.pos+1].isdigit()):
					num = sym
					i = self.pos+1
					while i <  self.len and self.input[i].isalnum(): 
						num += self.input[i]
						i+=1
					if i < len(self.input) and self.input[i] == '.':
						num += self.input[i]
						i+=1					
						while i < self.len and \
							self.input[i].isalnum(): 
							num += self.input[i]
							i+=1
						token = (FLOAT, num)
					else:
						token = (INT, num)
				else: # subtraction operator 	
					token = (KEYWORD, sym)
			else:
				token = (ERROR, self.input[self.pos])		
		self.cur_token = token		
		return token									

	def next(self):
		token = self.peek()
		if token:
			self.cur_token = None # eat another token
			if token[0] != ERROR:
				# offset input by token lexeme len
				self.pos += len(token[1])
				if token[0] == STRING : #offset for both quotes read but not captured
					self.pos += 2
				if token[0] == ERROR:
					token[1] = 'Unknown Token: ' + token[1] 
				
		else:
			token = (ERROR, ' Unexpected NULL Token') 
		return token
#------------------------Parser --------------------------#
def parse(lexer):
	'''
	Returns AST Nodes 
		(ASSIGN, (def_id_id, expr))
		(CLOSURE, ([<def_id_id> ...], expr))
		(APPLY ([ID KEYWORD] [<expr> ...]))
	'''
	ast = []
	done = False
	tag, value = lexer.peek()
	while not done:
		if tag == ID:
			# get def id 
			def_id = lexer.next()
			# check next token for equal sign
			tag, value = lexer.next()
			if tag == EQUAL:
				# return def_id value (id) and expression
				ast.append((ASSIGN, (def_id[1], parse_expr(lexer))))
			else: # standalone def_id
				ast.append(def_id)
		elif tag == ERROR:
			done = True 
			ast.append((tag,value))
		elif tag == EOI:
			done = True	
		else:
			ast.append(parse_expr(lexer))
		tag, value = lexer.peek()		
	return ast

def parse_expr(lexer):
	'''
	Parses individual expressions
		(INT  int)
		(ID  str)
		(FLOAT  float)
		(KETYWORD  str)
		(STRING str)
		(LIST  [<expr> ...])
		(LAMBDA  [params .. ] <expr>)
	'''
	tag, value = lexer.next()
	root = None
	if tag in [KEYWORD, ID, FLOAT, INT, STRING]: # if ID or Float or ...
		 # eat token
		root = (tag, value)
		# return 
	elif tag == LPAREN: # if application
		# apply first expression to all expressions until rparen
		expr = None 
		tag, value = lexer.peek()
		if tag == LAMBDA:
			lexer.next();
			params = [] #  bound parameter ids
			# get next, must be either def_id or dot
			tag, value = lexer.next()
			# get all following def_id values (ids)
			while tag == ID:
				params.append(value)
				tag, value = lexer.next()
			if tag == DOT:
				root = (CLOSURE, (params, parse_expr(lexer)))
				tag, value = lexer.next()
				if tag != RPAREN:
					root = (ERROR, 'Missing Closing Parentheses!')		
			else:
				root = (ERROR, 'Expected ' + DOT + ' at: ' + value)
		else:
			def_id = parse_expr(lexer)
			if def_id[0] != ID and def_id[0] != KEYWORD:
			 	expr = def_id	
			else:
			 	expr = def_id[1]
			args = []
			# eat lparen
			tag, value = lexer.peek()
			while tag != RPAREN and tag != ERROR and tag != EOI:	
				args.append(parse_expr(lexer))
				tag, value = lexer.peek()
			if tag == ERROR:
				root = tag, value
			elif tag == EOI:
				root = (ERROR, 'Missing Closing Parentheses!')		
			else:
				#eat rparen
				lexer.next()
				root = (APPLY, (expr, args))
	elif tag == LBRACK: 
		exprs = []
		tag, value = lexer.peek()
		while tag != RBRACK and tag != EOI and tag != ERROR:
			exprs.append(parse_expr(lexer))				
			tag, value = lexer.peek()			
		if tag == RBRACK:
			lexer.next() # eat rbrack			
			root = (LIST, exprs)
		elif tag == EOI:
			root = (ERROR, 'Missing closing list bracket')
		else:
			root = (tag, value)
	elif tag == ERROR:
		root = tag, value
	else:
		root = (ERROR, 'Unexpected :'+ value)
	return root


#------------------------Closure --------------------------#
class Closure:
	'''
		Closure Container
	'''
	def __init__(self, bindings,  expr, params, param_count=0):
		# locally bound def_idiables
		self.bindings = {}
		for def_id in bindings.keys():
			self.bindings[def_id] = bindings[def_id]
		# parameters to be substituted at call binding scope
		self.expr = expr
		self.params = []
		if params:
			param_count = 0
			for def_id in params:
				self.params.append(def_id)
				param_count+=1		
			# expression to evaluate at the scope of bindings
		self.param_count = param_count


	def __repr__(self):
		# s += ')\n\tBINDINGS: '
		# for def_id, value in self.bindings.items():
		# 	s += '\n\t\t' + def_id + ': ' + str(value) 
		s = '<proc:'
		for p in self.params:
			s += to_string(p,self.bindings)
		return s + '>'
	
class Thunk:
	'''
	Trampolined Objects
	Returned by application calls to be evaluated.
	'''
	def __init__(self, expr, bindings, is_builtin=False):
		self.bindings = {}
		for def_id in bindings.keys():
			self.bindings[def_id] = bindings[def_id]
		self.expr = expr
		self.is_builtin = is_builtin
	

#------------------------Evaluate Builtins--------------------------#
def eval_add(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	expr = None
	try:			
		if isinstance(left, str):
			right = str(right)
		elif isinstance(right, str):
			left = str(left)
		expr = left + right
	except:
		expr = (ERROR, 'Invalid Operands: Expected (+ <Int|Float|String> <Int|Float|String>)')
	return expr

def eval_sub(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	expr = None
	try:	
		# if either operands are strings, get the intersection of the two
		if isinstance(left, str) or isinstance(right, str):
			if right == None:
				expr = left
			else:
				expr = str(left).replace( str(right), '')			
		elif isinstance(left, list) or isinstance(right, list):# get set difference
			expr = []
			for e in left:
				if not e in right:
					expr.append(e) 
		else:
			expr = left - right		
	except:
		expr = (ERROR, 'Invalid Operands:Expected (- <Int|Float|String> <Int|Float|String>)')
	return expr

def eval_mul(bindings):
	# performs multiplication, or kleene start of string and list if second param is int
	left = bindings['0']
	right = bindings['1']
	expr = None
	del bindings['0']; del bindings['1']
	if  isinstance(left,str):
		if isinstance(right, str):
			expr = ''
			for i in range(0, len(left)):
				expr += left[i]
				if 	i < len(right):
					expr += right[i]
		else:
			# kleene start
			expr = ''
			i = 0
			while i < int(right):
				expr += left
				i+=1		
	else:
		try:			
			expr = left * right
		except:			
			expr = (ERROR, 'Invalid Operands: Expected  (* <Int|Float|String> <Int|Float|String>)')
	return expr						

def eval_div(bindings):
	# performs division, or set intersection of string
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	try:
		if isinstance(left, str):	
		# get the intersection!
			if right == None:
				expr = left
			else:
				right = str(right)
				expr = ''
				for sym in left:
					if not sym in right:
						expr += sym
		else:
			expr = left / right	
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (/ <Int|Float|String> <Int|Float|String>)')
	return expr							

def eval_mod(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	expr = None
	try:
		expr = evaluate(left,bindings) % evaluate(right,bindings)	
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (% <Int|Float> <Int>)')
	return expr							


def eval_root(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	expr = None
	# take a square root, cube root, etc
	try:
		expr = evaluate(left, bindings) ** (1.0/evaluate(right, bindings))
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (root <Int|Float> <Int|Float>)')		
	return expr

def eval_exp(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	expr = None
	# take a square root, cube root, etc
	try:
		expr = evaluate(left, bindings) ** (evaluate(right, bindings))
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (exp <Int|Float> <Int|Float>)')		
	return expr

def eval_not(bindings):
	left = bindings['0']
	del bindings['0']
	expr = None
	left = evaluate(left, bindings)
	if left == 0 or left == 'false':
		expr =  'true'
	else:
		expr = 'false'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left

	return expr

def eval_lt(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	left = evaluate(left, bindings)
	right = evaluate(right, bindings)
	if left < right:
		expr =  'true'
	else:
		expr = 'false'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left
	elif isinstance(right, tuple) and right[0] == ERROR:
		expr = right
	return expr

def eval_gt(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	left = evaluate(left, bindings)
	right = evaluate(right, bindings)
	if left > right:
		expr =  'true'
	else:
		expr = 'false'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left
	elif isinstance(right, tuple) and right[0] == ERROR:
		expr = right
	return expr

def eval_eq(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	left = evaluate(left, bindings)
	right = evaluate(right, bindings)
	if left == right:
		expr =  'true'
	else:
		expr = 'false'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left
	elif isinstance(right, tuple) and right[0] == ERROR:
		expr = right
	return expr
	
def eval_and(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	left = evaluate(left, bindings)
	right = evaluate(right, bindings)
	if (left != 0 and left != 'false') and (right != 'false' and right != 0):
		expr = 'true'
	else:
		expr = 'false'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left
	elif isinstance(right, tuple) and right[0] == ERROR:
		expr = right
	return expr

def eval_or(bindings):
	left = bindings['0']
	right = bindings['1']
	del bindings['0']; del bindings['1']
	left = evaluate(left, bindings)
	# lazy eval is left is not true
	if left == 'false' or left == 0: 		
		right = evaluate(right, bindings)
		if right != 0 and right == 'true':
			expr = 'true'
		else:
			expr = 'false'
	else:
		expr = 'true'
	if isinstance(left, tuple) and left[0] == ERROR :
		expr = left
	elif isinstance(right, tuple) and right[0] == ERROR:
		expr = right	
	return expr


def eval_type(bindings):
	expr = bindings['0']
	del bindings['0']
	expr = evaluate(left, bindings)
	if isinstance(expr, int):
		expr = 'int'
	elif isinstance(expr, float):
		expr = 'float'
	elif isinstance(expr, list):
		expr = 'list'
	elif isinstance(expr, bool):
		expr = 'bool'
	elif isinstance(expr, str):
		expr = 'string'
	return expr


def eval_print(bindings):
	expr = bindings['0']
	del bindings['0']
	expr = evaluate(expr,bindings)
	if isinstance(expr, tuple) and expr[0] == ERROR:
		return expr 
	elif isinstance(expr, list):
		s = '['
		for e in expr:	
			s +=to_string(e,bindings) + ' '
		expr = s+']'
	else:
		expr = to_string(expr,bindings)
	print(expr)
	return 'true' 

def eval_read(bindings):
	expr = None
	if bindings.has_key('0'):
		expr = bindings['0'] #expect file name if given, else read from stdio
		del bindings['0']
	else:
		expr = raw_input()
	return expr
def eval_int(bindings):
	expr = bindings['0']
	del bindings['0']
	try :
		expr = int(evaluate(expr, bindings))
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (int <Int|Float|String> <Int|Float|String>)')		
	return expr 

def eval_float(bindings):
	expr = bindings['0']
	del bindings['0']
	try :
		expr = float(evaluate(expr, bindings))
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (float <Int|Float|String> <Int|Float|String>)')		
	return expr 

def eval_bool(bindings):
	expr = bindings['0']
	del bindings['0']
	try :
		expr = evaluate(expr, bindings)
		if expr != 0:
			expr = 'true'
		elif expr != 'true':
			expr = 'false'
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (float <Int|Float|String> <Int|Float|String>)')		
	return expr 

def eval_string(bindings):
	expr = bindings['0']
	del bindings['0']
	try :
		value  = evaluate(expr, bindings)
		if isinstance(value, list):
			expr = ''
			for e in value:
				expr+=str(e)
		else:
			expr = str(value)
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (float <Int|Float|String|List> <Int|Float|String|List>)')		
	return expr 

def eval_list(bindings):
	# do not evaluate !
	expr = []
	i = 0
	s = '0'
	while bindings.has_key(s): 
		expr.append(bindings[s])
		i+=1
		s = str(i)
	return expr 

def eval_exit(bindings):
	return_expr = 	bindings['0']
	del bindings['0'] # null args in case they are used
	sys.exit(evaluate(return_expr, bindings))


def eval_set(bindings):
	# Lazy set!
	var = bindings['0']
	expr = bindings['1']
	del bindings['0']; del bindings['1']# null args in case they are used
	if isinstance(var, tuple) and var[0] == ID:
		if bindings.has_key(var[1]):
			#expr = bindings[var[1]] = bindings['1']
			expr = bindings[var[1]] = evaluate(expr, bindings) # strict evaluation, update var
		else:
			expr = (ERROR, 'Could not set: ' + str(var[1]) + ' not defined')			
	else:
		expr = (ERROR, 'Invalid Operands: Expected  (set <id> <expr>)')		
	return expr


def eval_if(bindings):
	cond = bindings['0']
	true_expr = bindings['1']
	false_expr = bindings['2']
	expr = None		
	del bindings['0']; del bindings['1']; del bindings['2'] # null args in case they are used
	cond = evaluate(cond, bindings)
	# if error
	if isinstance(cond, tuple) and cond[0] == ERROR:
		expr = cond	
	else:	
		if cond != [] and cond != 'false' and (cond == 'true' or cond != 0) :
			# evaluate true expr
			#expr = evaluate(true_expr, bindings)	
			expr = Thunk(true_expr, bindings)	
		else:
			# evaluate false expr
			#expr = evaluate(false_expr, bindings)	
			expr = Thunk(false_expr, bindings)	
	return expr
	

def eval_while(bindings):
	cond_expr = bindings['0']		
	body = bindings['1']	
	expr = None
	cond = 'true'
	del bindings['0']; del bindings['1'] # null args in case they are used
	while cond != 'false' and (cond == 'true' or cond != 0) :
		cond = evaluate(cond_expr, bindings)
		expr = evaluate(body, bindings)
		if isinstance(expr, tuple) and expr[0] == ERROR:
			return expr 
	return expr
	

def eval_import(bindings):
	src_file = bindings['0']
	del bindings['0']
	source = evaluate(src_file, bindings)
	# interpret the file at the global binding level
	global global_bindings
	expr =  interpret(source, global_bindings, True)
	
	if not isinstance(expr, tuple) or not expr[0] == ERROR:
		expr = 'true'
	return expr

def eval_range(bindings):
	# return a list between given ranges
	start = bindings['0']
	end  = bindings['1']
	del bindings['0']; del bindings['1'] # null args in case they are used
	expr = []		
	d = 1
	try:
		if not isinstance(start, int):
			start = evaluate(start, bindings) 	
		if not isinstance(end, int):
			end = evaluate(end, bindings)
		if start > end:
			d = -1
		while start != end:	
			expr.append(start)	
			start += d
	except:
		expr = (ERROR, 'Invalid Operands: Expected  (range <Int> <Int>)')

	return expr


def eval_reverse(bindings):
	#reverse a list
	expr = None
	arg =  bindings['0']
	del bindings['0'] # null args in case they are used
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (reverse <list> )') 
	else:
		 expr = arg[::-1] #reverses list in pythonic way with slicing 
	return expr

def eval_head(bindings):
	# return first element in list
	arg = None
	arg =  bindings['0']
	del bindings['0'] # null args in case they are used
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (head <list>)') 
	else:
		# evaluate the elements value
		expr = evaluate(arg[0],bindings) #reverses list in pythonic way with slicing 
	return expr

def eval_tail(bindings):
	# return all but first elements in list
	expr = None
	arg =  bindings['0']
	del bindings['0'] # null args in case they are used
	if not arg or not isinstance(arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (tail <list>)') 
	else:
		 expr = arg[1:] #pythinic get remaining 
	return expr

def eval_map(bindings):
	# (map <closure> <list> ... )
	# expect a list and a closure
	# each elem is passed to closure that should except one param for each list
	# added result to list thats returned
	expr = None
	list_args = []
	list_size = 0
	if not bindings.has_key('0'):
		expr = (ERROR, 'Invalid Operands: Expected (map <abstraction> <list> ...)') 
	else:
		closure = bindings['0']
		del bindings['0'] # null args in case they are used
		if not closure or not isinstance(closure, Closure):
			expr = (ERROR, 'Invalid Operands: Expected (map <abstraction> <list> ...)') 	
		# get all args
		i = 1 #list args		
		while bindings.has_key(str(i)) and not expr: 
			list_args.append(bindings[str(i)])
			if list_size is 0:
				list_size = len(list_args[-1])
			elif not list_size is len(list_args[-1]):	
			  	expr = (ERROR, 'All list arguments must be of equal length: Expected (map <abstraction> <list> ...)') 
			elif not isinstance(list_args[-1], list):
				expr = (ERROR, 'Invalid Operands: Expected (map <abstraction> <list> ...)') 
			i += 1
		# see if len(args) matches len of closure, if variable args, just pass
		if not expr:
			if closure.param_count != -1 and len(list_args) != closure.param_count:
			 	expr = (ERROR, 'Invalid Abstraction: Must be a parameter for each list : (map <abstraction> <list> ...)')
			else:
				i = 0 # cur eval element
				expr = []	
				# var args 
				while i < list_size:				
					# eval args at call scope, [x y] should not refer to \x y . in abstactions
					for j in range(0, len(closure.params)):
						closure.bindings[closure.params[j]] = evaluate(list_args[j][i],	bindings)
					result = evaluate(closure.expr, closure.bindings)
					if isinstance(result, tuple ) and result[0] == ERROR:
						return result # get error
					else:
						expr.append( result)
					i += 1
	return expr

def eval_filter(bindings):
	# (filter <cond_closure>  <list>)
	# expect a list and a closure
	# each elem is passed to closure that should except one param 
	# and return cond if true add elem to list thats returned
	expr = []
	# get closure
	closure = bindings['0']
	list_arg = bindings['1']
	del bindings['0']; del bindings['1'] #disable in case they are used
	closure = evaluate(closure, bindings)
	list_arg = evaluate(list_arg, bindings)
	if not isinstance(closure, Closure) or not isinstance(list_arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (filter <cond-abstraction> <list>)') 	
	elif closure.param_count != 1:
		expr = (ERROR, 'Invalid Abstraction: Must only have a single parameter')
	else:
		# eval args at call scope, [x y] should not refer to \x y . in abstactions
		for elem in list_arg:
			# set only param to elem in list
			closure.bindings[closure.params[0]] = evaluate(elem, bindings) # set param to element
			result = evaluate(closure.expr, closure.bindings)
			if isinstance(result, tuple) and result[0] == ERROR:
				return result # get error!
			elif result != 'false' and result != 0:
				expr.append(elem)
	return expr


def eval_fold(bindings):
	# (fold <abstraction> <initial> <list>) 
	# folds right! to fold left, reverse list! 
	# (fold + x [1 2 3 4]) = (+ 1 (+ 2( + 3 (+ 4 x))))
	expr = None
	local_bindings = {}
	closure = bindings['0']
	intial = bindings['1']
	list_arg = bindings['2']
	bindings['0']=bindings['1']=bindings['2']=None #disable in case they are used
	if not closure or not isinstance(closure, Closure) \
		or not list_arg or not isinstance(list_arg, list):
		expr = (ERROR, 'Invalid Operands: Expected (fold <abstraction> <initial> <list>)') 
	elif closure.param_count != 2:
		expr = (ERROR, 'Invalid abstraction Parameters: Expected 2 parameters in (fold <abstraction> <initial> <list>)') 
	else:	
		# get locals
		# eval last two first!
		i = len(list_arg)-1 
		# eval args at call scope, [x y] should not refer to \x y . in abstactions
		result =  evaluate(intial, bindings)
		while i >= 0:
			closure.bindings[closure.params[0]] = evaluate(list_arg[i], bindings)
			closure.bindings[closure.params[1]] = result
			result = evaluate(closure.expr, closure.bindings)	
			if isinstance(result, tuple) and result[0] == ERROR:
				return result # get error!
			i-=1			
		expr = result	
	return expr


'''
	Builtin Evaluate Action Table	
	symbol : (function(bindings), paramcount)
'''
builtins = {
	# control (special form)
	'if'	:(eval_if, 3),	
	'set'	:(eval_set, 2),	
	'while'	:(eval_while, 2),	
	'import':(eval_import,1),
	'list'	:(eval_list, -1),
	'exit':(eval_exit,1),
	# arithmetic
	'+'	:(eval_add, 2),
	'-'	:(eval_sub,2),
	'*'	:(eval_mul, 2),
	'/'	:(eval_div, 2),
	'%'	:(eval_mod, 2),
	#bools
	'<'	:(eval_lt, 2),
	'>'	:(eval_gt,2),
	'eq'	:(eval_eq,2),
	'root'	:(eval_root,2),
	'exp'	:(eval_exp,2),
	'and'	:(eval_and,2),
	'or'	:(eval_or,2),
	'not'	:(eval_not,1),
	# IO
	'print'	:(eval_print,1 ),
	'read'	:(eval_read,-1 ),
	# types	
	'type'	:(eval_type,1),
	'int'	:(eval_int, 1),
	'float'	:(eval_float, 1),
	'string'	:(eval_string, 1),
	'bool'	:(eval_bool, 1),
	# list utils
	'range':(eval_range,2),
	'head' :(eval_head, 1),
	'tail' :(eval_tail, 1),
	'reverse':(eval_reverse, 1),
	'filter':(eval_filter,2),
	'fold':(eval_fold,3),
	'map':(eval_map,-1) 
}

def eval_builtin(root, bindings):
	expr = None
	#if def_id then requesting closure definition
	if root[0] == KEYWORD:
		tag, value = root
		closure_tag = (BUILTIN, value)
		if value == 'true' or value ==  'false':
			expr = value
		elif value in builtins:
			arg_count = builtins[value][1]
			if arg_count != -1: 
				params = [str(x) for x in range(0,arg_count)]
				expr = bindings[value] = Closure(bindings,  closure_tag, params)
			else:
				expr = bindings[value] = Closure(bindings,  closure_tag, None, arg_count)
	# else ( def_id, args) call to built_in closure
	elif root[0] == ERROR:
		expr = root
	else: 
		
		expr= builtins[root][0](bindings)	
	return expr

#------------------------Evaluate --------------------------#
def evaluate(root, bindings):
	# Trampoline evaluation thunks 
	expr = evaluate_thunk(root, bindings)
	while isinstance(expr, Thunk):
		expr = evaluate_thunk(expr.expr, expr.bindings)
	return expr

def evaluate_thunk(root, bindings):
	expr = root # evaluated expression
	tag, value = (None, None)
	try:
		tag, value = root
	except:
		pass
	
	if tag == ASSIGN:
		# add expr to binding with def_id key
		if bindings.get(value[0]):
			print(value[0], "Already exists!")
			expr = None	
		else:
			#expr = value[1] # non-strict is slower! 
			expr = evaluate(value[1], bindings)

			if not isinstance(expr, tuple) or not expr[0] == ERROR:
				bindings[value[0]] = expr # is not error, bind
	elif tag == CLOSURE:
		# return a closure object with parent bindings
		expr =  Closure(bindings, value[1], value[0])
	elif tag == APPLY:
		# Evaluate by  binding all closure params with each args
		def_id = value[0] # get closure id
		args = value[1]
		closure = None
		# if an application, get the closure definition
		if def_id[0] == CLOSURE :	
			closure =  evaluate(def_id, bindings) # if the def_id is not an id but a closure		
		elif def_id[0] == APPLY:
			closure = evaluate(def_id, bindings)
		# get the closure to be called
		else:
			# must be identifier, if not application of closure
			if isinstance(def_id, str): 
				# if not an application, and not user defined, request builtin closure def
				if def_id not in bindings:
					closure = evaluate((KEYWORD, def_id), bindings)
				else:
					closure = evaluate(bindings[def_id], bindings)	# nonstrict is slower!
			else:	
				closure = (ERROR, "Invalid Type:("+str(type(def_id))+
						" )Application Expected <Abstraction|Id|Application>")

		# if closure was found 
		if isinstance(closure, Closure):
			arg_count= len(args)
			param_count = closure.param_count
			params = closure.params
			if param_count != -1 and param_count != arg_count:
				# get closure like call to display
				expr = (ERROR, 'Incorrect number of arguments passed to application: '\
						+ str(def_id) + " " + to_string(closure, bindings))			
			elif def_id in controls: # do not eval
				local_bindings	= {}
				# bind all arguments to closures local bindings
				if def_id == 'import': # modify the eval scope bindings!						 
					local_bindings=  bindings
				for bind in bindings:
					local_bindings[bind] = bindings[bind]
				# bind all arguments to closures local bindings
				if def_id in controls: # do not eval
					if param_count != -1: # not var_arg
						for i in range(0, arg_count):
							#bindings[params[i]] = args[i]
							local_bindings[params[i]] = args[i]
					else:
						param = 0
						for i in range(0, arg_count): 
							local_bindings[str(param)] = args[i] 
							param += 1	
					###expr = eval_builtin(def_id, local_bindings)	
					expr = Thunk((BUILTIN, def_id), local_bindings) # is builtin		
			else:
				# if a application closure
				local_bindings	= {}
				# bind all arguments to closures local bindings
				for bind in bindings:
					local_bindings[bind] = bindings[bind]
				# update closure bindings last, will add closure precedence over calling
				for bind in closure.bindings.keys():
					local_bindings[bind] = closure.bindings[bind]	
				if param_count != -1: # if not var args
					# evaluate each argument and bind it to the local level 
					for i in range(0, arg_count):
						local_bindings[params[i]] = evaluate(args[i], bindings) 	
				else:
					param = 0
					for i in range(0, arg_count):
						local_bindings[str(param)] = evaluate(args[i], bindings) 
						param += 1		
				###expr = evaluate(closure.expr, local_bindings)
				expr = Thunk(closure.expr, local_bindings)
		# empty closure, could not find
		else:
			if closure:
				if isinstance(closure, tuple) and closure[0] == ERROR:
					expr = closure
				else:
					expr = (ERROR, str(closure) + ' is not bound within this application: ')
			else:
				expr = (ERROR, 'Application is not defined: ' + str(def_id))
	elif tag == ID:
		if value in bindings:
			#expr = evaluate(bindings[value], bindings) # nonstrict is slower!
	 		expr = bindings[value] 			
		else:
			expr = (ERROR, str(tag) + ' ' + str(value) + " not defined in this scope")
	elif tag == LIST:
		# eval all exprs into list object
		expr = []
		for arg in value:
			expr.append(arg)
	elif tag == FLOAT:
		expr = float(value)
	elif tag == INT:
		expr = int(value)
	elif tag == STRING:
		expr = str(value)
	elif tag == KEYWORD: #if keyword, get builtin definition
		expr = eval_builtin(root, bindings)
	elif tag == BUILTIN: # if builtin, evaluate
		expr = eval_builtin(value, bindings)
	#else error		
	return expr
 

def to_string(root, bindings): # do not evaluate, but parse the ast nodes and return string represenation for printing	
	s=''
	if isinstance(root, tuple):
		tag, value =root
		if tag in [INT, FLOAT, STRING, KEYWORD, BUILTIN]:
			s = to_string(value,bindings)
		elif tag == ID:
			if value in bindings.keys():
				s = to_string(bindings[s],bindings)
			else:
				expr = 'ERROR:' + str(var[1]) + ' not defined'			
		elif tag == LIST:
			for e in value:
				s += to_string(e,bindings)
		elif tag == CLOSURE:
			s = '<proc:' + to_string(value,bindings) + '>'	
		elif tag == APPLY:
			s = '(' + to_string(value[0],bindings) + ' ' 
			for arg in value[1]:
				s += to_string(arg,bindings)	 + ' '
			s += ')'
	elif isinstance(root, list):
		s = '['
		for e in root:
			s += to_string(e, bindings) + ' '
		s += ']'	
	else:
		s = str(root)
	return s 	

# Run main after all defintions 
if __name__ == '__main__':
	main(sys.argv[1:])
